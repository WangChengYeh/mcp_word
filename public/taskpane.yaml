name: MCP Word
description: Office.js client that applies 'editTask' Socket.IO events from a local MCP server to the current Word document.
host: WORD
api_set:
  WordApi: '1.3'
libraries:
  - https://cdn.socket.io/4.7.5/socket.io.min.js
script:
  language: JavaScript
  content: |
    // Configure server via query param: ?server=https://localhost:3000
    const SERVER_URL = new URLSearchParams(location.search).get('server') || 'https://localhost:3000';

    let socket;
    let isConnected = false;

    Office.onReady(function(info) {
      if (info.host === Office.HostType.Word) {
        init();
      } else {
        console.error('This snippet is designed for Microsoft Word.');
      }
    });

    function init() {
      // Explicit URL since Script Lab runs cross-origin from localhost
      socket = io(SERVER_URL, { transports: ['websocket'] });

      socket.on('connect', () => {
        isConnected = true;
        updateStatus('Connected to ' + SERVER_URL);
        // optional: announce presence
        socket.emit('status', {
          type: 'connection',
          message: 'Script Lab client connected',
          host: 'Word',
          timestamp: new Date().toISOString()
        });
      });

      socket.on('disconnect', () => {
        isConnected = false;
        updateStatus('Disconnected from server');
      });

      socket.on('connect_error', (err) => {
        isConnected = false;
        console.error('Connection error:', err);
        updateStatus('Connection failed');
      });

      // Listen for tool-named event
      socket.on('editTask', (payload) => {
        console.log('Received editTask:', payload);
        handleEditTask(payload);
      });

      // Basic heartbeat UI
      setInterval(() => {
        const dot = document.getElementById('connection-indicator');
        if (dot) dot.style.background = isConnected ? 'green' : 'red';
      }, 1000);
    }

    async function handleEditTask(edit) {
      const { taskId, content, action = 'insert', target = 'selection' } = edit || {};
      if (typeof content !== 'string') {
        notifyError(taskId, 'Invalid content');
        return;
      }

      try {
        await Word.run(async (context) => {
          const body = context.document.body;
          let range;

          switch (target) {
            case 'document':
              if (action === 'replace') {
                body.clear();
                body.insertParagraph(content, Word.InsertLocation.start);
                await context.sync();
                notifyComplete(taskId, 'Replaced entire document');
                updateStatus('Edit completed: replace (document)');
                return;
              } else {
                range = body.getRange('End');
              }
              break;
            case 'cursor':
            case 'selection':
            default:
              range = context.document.getSelection();
              break;
          }

          switch (action) {
            case 'insert':
              range.insertText(content, Word.InsertLocation.after);
              break;
            case 'replace':
              range.insertText(content, Word.InsertLocation.replace);
              break;
            case 'append':
              range.insertText('\n' + content, Word.InsertLocation.after);
              break;
            default:
              throw new Error(`Unsupported action: ${action}`);
          }

          await context.sync();
          notifyComplete(taskId, `Successfully ${action} on ${target}`);
          updateStatus(`Edit completed: ${action}`);
        });
      } catch (e) {
        notifyError(taskId, e?.message || 'Unknown error');
        updateStatus(`Edit failed: ${e?.message || e}`);
      }
    }

    function notifyComplete(taskId, message) {
      if (!socket) return;
      socket.emit('edit-complete', {
        taskId,
        success: true,
        message,
        timestamp: new Date().toISOString(),
      });
    }

    function notifyError(taskId, error) {
      if (!socket) return;
      socket.emit('edit-error', {
        taskId,
        error,
        timestamp: new Date().toISOString(),
      });
    }

    function updateStatus(message) {
      const el = document.getElementById('status');
      if (el) {
        el.textContent = 'Status: ' + message;
        el.title = new Date().toISOString();
      }
      console.log(message);
    }
template:
  type: html
  content: |
    <div style="font: 14px/1.4 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial;">
      <h3>MCP Word â€” Script Lab Client</h3>
      <div id="status">Initializing...</div>
      <div id="connection-indicator" style="width:10px;height:10px;border-radius:50%;display:inline-block;margin-top:6px;background:red;"></div>
      <p>This page listens for <code>editTask</code> events from the MCP server and applies them in the current Word document.</p>
      <p>Override server: append <code>?server=https://localhost:3000</code> to the snippet URL in Script Lab.</p>
      <p>Ensure your local HTTPS cert is trusted and the port matches the server.</p>
    </div>
